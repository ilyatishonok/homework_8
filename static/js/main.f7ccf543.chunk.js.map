{"version":3,"sources":["components/Tabs/Tab/TabButton.tsx","components/Tabs/Tab/Tab.tsx","components/Tabs/Tabs.tsx","components/ArticleList/Article/ArticleLink.tsx","components/ArticleList/Article/Article.tsx","constants/config.ts","components/ArticleList/ArticleList.tsx","components/Loader/Loader.tsx","utils/api.ts","components/ArticlesContainer/ArticlesContainer.tsx","data/tabs.ts","components/App/App.tsx","serviceWorker.js","index.tsx"],"names":["TabButton","styled","div","_templateObject","props","selected","Tab","onTabClick","_this$props","_this","onTabChange","id","_this$props2","this","title","react_default","a","createElement","Tab_TabButton","onClick","Component","TabsContainer","Tabs_templateObject","Tabs","activeTab","tabs","map","tab","Tab_Tab","key","ArticleLink","attrs","_ref","urlToImage","style","backgroundImage","concat","ArticleLink_templateObject","ArticleContent","Article_templateObject","ArticleTitle","h1","_templateObject2","ArticleDescription","_templateObject3","Article","description","url","Article_ArticleLink","href","config","defaultUrlToImage","defaultErrorMessage","defaultQuery","ArticleList","articles","Fragment","article","ArticleList_Article_Article","RotatePlane","keyframes","Loader_templateObject","Spinner","Loader_templateObject2","Loader","api","fetch","then","response","ok","Error","statusText","json","data","ContentLayout","ArticlesContainer_templateObject","ArticlesContainer_templateObject2","HighLight","b","ArticlesContainer_templateObject3","ArticlesContainer","state","isFetching","error","tabId","setState","find","query","page","Math","floor","random","process","catch","_this$state","ArticlesContainer_Error","components_Loader_Loader","components_ArticleList_ArticleList","components_Tabs_Tabs","renderContent","GlobalStyle","createGlobalStyle","App_templateObject","App","ArticlesContainer_ArticlesContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7ccf543.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface TabButtonProps {\r\n    selected: boolean;\r\n}\r\n\r\nconst TabButton = styled.div`\r\n    cursor: pointer;\r\n    width: 25%;\r\n    background: ${ ((props: TabButtonProps) => props.selected ? '#491253' : 'black')};\r\n    color: white;\r\n    font-family: fantasy;\r\n    font-size: 20px;\r\n    transition: all ease .1s;\r\n    user-select: none;\r\n    text-align: center;\r\n    padding: 15px;\r\n\r\n    &:hover {\r\n        background: #491253;\r\n        border: 0px;\r\n    }\r\n\r\n    @media(max-width: 750px) {\r\n        width: 50%;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default TabButton;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport TabButton from './TabButton';\r\n\r\ninterface TabPropTypes {\r\n    title: string;\r\n    onTabChange: (tabId: string) => void,\r\n    selected: boolean;\r\n    id: string;\r\n}\r\n\r\nexport default class Tab extends Component<TabPropTypes> {\r\n    private onTabClick = () : void => {\r\n        const { selected, onTabChange, id } = this.props;\r\n\r\n        if (!selected) {\r\n            onTabChange(id);\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const { title, selected } = this.props;\r\n\r\n        return (\r\n            <TabButton selected={selected} onClick={this.onTabClick}>\r\n                {title}\r\n            </TabButton>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Tab from './Tab';\r\nimport { TabInterface } from '../../types';\r\n\r\nconst TabsContainer = styled.div`\r\n    position: fixed;\r\n    display: inline-flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n    box-shadow: 0 0 10px black;\r\n`;\r\n\r\ninterface TabsProps {\r\n    tabs: Array<TabInterface>;\r\n    activeTab: string;\r\n    onTabChange: (tabId: string) => void;\r\n}\r\n\r\nconst Tabs: React.SFC<TabsProps> = props => {\r\n    const { activeTab, tabs, onTabChange } = props;\r\n\r\n    return (\r\n        <TabsContainer>\r\n           {tabs.map(tab => (\r\n                <Tab\r\n                    key={tab.id}\r\n                    id={tab.id}\r\n                    title={tab.title}\r\n                    onTabChange={onTabChange}\r\n                    selected={activeTab === tab.id}\r\n                />\r\n            ))} \r\n        </TabsContainer>\r\n    );\r\n}\r\n\r\nexport default Tabs;","import styled from 'styled-components';\r\n\r\ninterface ArticleLinkProps{\r\n    urlToImage: string;\r\n}\r\n\r\nconst ArticleLink = styled.a.attrs<ArticleLinkProps, any>(({ urlToImage }: ArticleLinkProps) => ({\r\n    style: {\r\n        backgroundImage: `url(${urlToImage})`,\r\n    },\r\n}))`\r\n    width: 100%;\r\n    color: white;\r\n    cursor: pointer;\r\n    background-position: center;\r\n    background-size: cover;\r\n    background-repeat: no-repeat;\r\n    text-decoration: none;\r\n`;\r\n\r\nexport default ArticleLink;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ArticleLink from './ArticleLink';\r\n\r\nconst ArticleContent = styled.div`\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n    min-height: 200px;\r\n    padding: 30px;\r\n    transition: all ease .2s;\r\n\r\n    &:hover {\r\n        background-color: rgba(0,0,0,0.5);\r\n    }\r\n`;\r\n\r\nconst ArticleTitle = styled.h1`\r\n    margin: 0px;\r\n`;\r\n\r\nconst ArticleDescription = styled.div`\r\n    margin: 0px;\r\n`;\r\n\r\ninterface ArticleProps {\r\n    title: string;\r\n    urlToImage: string;\r\n    description: string;\r\n    url: string;\r\n}\r\n\r\nconst Article: React.SFC<ArticleProps> = props => {\r\n    const { title, urlToImage, description, url } = props;\r\n\r\n    return (\r\n        <ArticleLink urlToImage={urlToImage} href={url}>\r\n            <ArticleContent>\r\n                <ArticleTitle>{title}</ArticleTitle>\r\n                <ArticleDescription>{description}</ArticleDescription>\r\n            </ArticleContent>\r\n        </ArticleLink>\r\n    );\r\n}\r\n\r\nexport default Article;","interface Config {\r\n    defaultUrlToImage: string;\r\n    defaultErrorMessage: string;\r\n    defaultQuery: string;\r\n}\r\n\r\nconst config: Config = {\r\n    defaultUrlToImage: 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/1024px-No_image_available.svg.png',\r\n    defaultErrorMessage: 'Error while fetching data. Please try again!',\r\n    defaultQuery: 'people',\r\n};\r\n\r\nexport default config;","import React, { ReactNode } from 'react';\r\nimport Article from './Article';\r\nimport { ArticleInterface } from '../../types';\r\nimport config from '../../constants/config';\r\n\r\ninterface ArticleListPropTypes {\r\n    articles: ArticleInterface[];\r\n}\r\n\r\nconst ArticleList: React.StatelessComponent<ArticleListPropTypes> = ({ articles }) => {\r\n    return (\r\n        <React.Fragment>\r\n            {articles.map((article: ArticleInterface): ReactNode => ( \r\n                <Article\r\n                    key={article.title}\r\n                    title={article.title} \r\n                    description={article.description}\r\n                    url={article.url}\r\n                    urlToImage={article.urlToImage || config.defaultUrlToImage}\r\n                />\r\n            ))}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ArticleList;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst RotatePlane = keyframes`\r\n    0% { \r\n        transform: perspective(120px) rotateX(0deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(0deg) rotateY(0deg) \r\n    } 50% { \r\n        transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180.1deg) rotateY(0deg) \r\n    } 100% { \r\n        transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n        -webkit-transform: perspective(120px) rotateX(-180deg) rotateY(-179.9deg);\r\n    }\r\n`;\r\n\r\nconst Spinner = styled.div`\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: black;\r\n    margin: 100px auto;\r\n    -webkit-animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n    animation: ${RotatePlane} 1.2s infinite ease-in-out;\r\n`;\r\n\r\nconst Loader: React.SFC<{}> = () => {\r\n    return <Spinner></Spinner>\r\n}\r\n\r\nexport default Loader;","function api<T>(url: string): Promise<T> {\r\n    return fetch(url)\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(response.statusText);\r\n            }\r\n\r\n            return response.json().then(data => data as T);\r\n        });\r\n}\r\n\r\nexport default api;","import React, { Component, ReactNode } from 'react';\r\nimport styled from 'styled-components';\r\nimport Tabs from '../Tabs';\r\nimport ArticleList from '../ArticleList';\r\nimport Loader from '../Loader';\r\nimport { ArticleInterface, TabInterface } from '../../types';\r\nimport config from '../../constants/config';\r\nimport api from '../../utils/api';\r\n\r\nconst ContentLayout = styled.div`\r\n    margin-left: 200px;\r\n    margin-right: 200px;\r\n    padding-top: 54px;\r\n    box-shadow: 0 0 20px black;\r\n    min-height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    text-align: center;\r\n\r\n    @media(max-width: 1020px) {\r\n        margin-left: 100px;\r\n        margin-right: 100px;\r\n    }\r\n    \r\n    @media(max-width: 750px) {\r\n        margin-left: 50px;\r\n        margin-right: 50px;\r\n        padding-top: 108px;\r\n    }\r\n    \r\n    @media(max-width: 520px) {\r\n        margin: 0px;\r\n        padding-top: 216px;\r\n    }\r\n`;\r\n\r\nconst Error = styled.div`\r\n    color:red;\r\n`;\r\n\r\nconst HighLight = styled.b`\r\n    color: #491253;\r\n`;\r\n\r\ninterface ArticlesContainerState {\r\n    activeTab: string;\r\n    articles: ArticleInterface[];\r\n    isFetching: boolean;\r\n    error: string;\r\n}\r\n\r\ninterface ArticlesContainerProps {\r\n    tabs: TabInterface[];\r\n}\r\n\r\nexport default class ArticlesContainer extends Component<ArticlesContainerProps, ArticlesContainerState> {\r\n    state = {\r\n        activeTab: '',\r\n        articles: [],\r\n        isFetching: false,\r\n        error: '',\r\n    }\r\n\r\n    public onTabChange = (tabId: string) : void => {\r\n        const { tabs } = this.props;\r\n        const { defaultErrorMessage } = config;\r\n\r\n        this.setState({\r\n            activeTab: tabId,\r\n            error: '',\r\n            isFetching: true,\r\n        }); \r\n\r\n        const tab = tabs.find((tab: TabInterface) => tab.id === tabId);\r\n        const query: string = tab ? tab.title : config.defaultQuery;\r\n        const page = Math.floor((Math.random() * 50) + 1);\r\n\r\n        const apiKey: string | undefined = process.env.REACT_APP_API_KEY;\r\n        const apiSource: string | undefined = process.env.REACT_APP_API_URL;\r\n\r\n        api<{ articles: ArticleInterface[]; }>(`${apiSource}?page=${page}&apiKey=${apiKey}&q=${query}`)\r\n            .then((data): void => {\r\n                this.setState({\r\n                    isFetching: false,\r\n                    articles: data.articles,\r\n                });\r\n            })\r\n            .catch((): void => {\r\n                this.setState({\r\n                    isFetching: false,\r\n                    error: defaultErrorMessage,\r\n                });\r\n            });\r\n    }\r\n\r\n    public renderContent(): ReactNode {\r\n        const { activeTab, isFetching, error, articles } = this.state;\r\n\r\n        if (error) {\r\n            return <Error>{error}</Error>;\r\n        }\r\n\r\n        if (isFetching) {\r\n            return <Loader />\r\n        }\r\n\r\n        if (!activeTab) {\r\n            return (\r\n                <div>\r\n                    Please, select any Tab to display <HighLight>20</HighLight> random articles of chosen category\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return <ArticleList articles={articles} />\r\n    }\r\n\r\n    public render(): ReactNode {\r\n        const { tabs } = this.props;\r\n        const { activeTab } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Tabs activeTab={activeTab} onTabChange={this.onTabChange} tabs={tabs} />\r\n                <ContentLayout>\r\n                    {this.renderContent()}\r\n                </ContentLayout>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import { TabInterface } from '../types';\r\n\r\nconst tabs: TabInterface[] = [\r\n    {\r\n        id: '0',\r\n        title: 'World',\r\n    },\r\n    {\r\n        id: '1',\r\n        title: 'People',\r\n    },\r\n    {\r\n        id: '2',\r\n        title: 'Sport',\r\n    },\r\n    {\r\n        id: '3',\r\n        title: 'Games',\r\n    },\r\n];\r\n\r\nexport default tabs;","import React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport ArticlesContainer from '../ArticlesContainer';\r\nimport tabs from '../../data/tabs';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        min-height: 100%;\r\n        margin: 0px;\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-wrap: nowrap;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        font-family: fantasy;\r\n    }\r\n\r\n    #root {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nconst App: React.SFC<{}> = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <GlobalStyle />\r\n            <ArticlesContainer tabs={tabs} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}